{"version":3,"sources":["Input.js","Moves.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","useState","gridDimensions","height","setHeight","width","setWidth","sendBack","setGridDimensions","Container","fluid","Row","Col","Form","inline","FormGroup","style","margin","FormLabel","FormControl","type","min","max","placeholder","onChange","e","target","value","Moves","moves","Badge","variant","Grid","state","mushrooms","direction","timer","mario","next","x","y","prev","moveMario","bind","includes","shouldBounce","changeDirection","nextMarioLocation","createRandomMushrooms","ArrowKeysReact","config","left","console","log","setState","right","up","down","this","setInterval","clearInterval","shrooms","i","Math","floor","random","push","length","bounced","newMushrooms","filter","m","forceUpdate","grid","Array","fill","map","_","id","events","tabIndex","item","key","maybeMushroom","classess","className","libr","j","isMarioThere","hasMushroom","createGrid","mushroom","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e253324d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './input.css';\nimport {Col, Container, Form, FormControl, FormGroup, FormLabel, FormText, Row} from \"react-bootstrap\";\n\nfunction Input(props) {\n    const [height, setHeight] = useState(props.gridDimensions.height);\n    const [width, setWidth] = useState(props.gridDimensions.width);\n\n    function sendBack() {\n        props.setGridDimensions({height, width});\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                    <Form inline>\n                        <FormGroup style={{margin: \"1em\"}}>\n                            <FormLabel>Width ({width})</FormLabel>\n                            <FormControl type=\"range\" min={4} max={16} placeholder={\"width\"} onChange={(e) => {\n                                setWidth(e.target.value);\n                                sendBack();\n                            }}/>\n                        </FormGroup>\n                        <FormGroup style={{margin: \"1em\"}}>\n                            <FormLabel>Height ({height})</FormLabel>\n                            <FormControl type=\"range\" min={4} max={16} placeholder={\"height\"} onChange={(e) => {\n                                setHeight(e.target.value);\n                                sendBack();\n                            }}/>\n                        </FormGroup>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Input;","import React from 'react';\nimport {Badge} from \"react-bootstrap\";\n\nfunction Moves(props) {\n    const moves = props.moves;\n    return (\n        <Badge variant={\"success\"}>\n            {\n                moves > 0 && moves + \" moves\"\n            }\n        </Badge>\n    );\n}\n\nexport default Moves;","import React, {Component} from 'react';\nimport './grid.css';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport Moves from './Moves';\nimport {Container, Row, Col} from \"react-bootstrap\";\n\nexport default class Grid extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: this.props.gridDimensions.height,\n            width: this.props.gridDimensions.width,\n            mushrooms: [],\n            direction: null,\n            timer: null,\n            mario: {\n                next: {x: 0, y: 0},\n                prev: {x: 0, y: 0}\n            },\n            moves: 0\n        };\n        this.moveMario = this.moveMario.bind(this);\n        this.includes = this.includes.bind(this);\n        this.moveMario = this.moveMario.bind(this);\n        this.shouldBounce = this.shouldBounce.bind(this);\n        this.changeDirection = this.changeDirection.bind(this);\n        this.nextMarioLocation = this.nextMarioLocation.bind(this);\n        this.createRandomMushrooms = this.createRandomMushrooms.bind(this);\n        ArrowKeysReact.config({\n            left: () => {\n                console.log('going left');\n                this.setState({\n                    direction: 'l'\n                });\n            },\n            right: () => {\n                console.log('going right');\n                this.setState({\n                    direction: 'r'\n                });\n            },\n            up: () => {\n                console.log('going up');\n                this.setState({\n                    direction: 'u'\n                });\n            },\n            down: () => {\n                console.log('going down');\n                this.setState({\n                    direction: 'd'\n                });\n            }\n        });\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return {height: props.gridDimensions.height, width: props.gridDimensions.width, mushroom: props.mushrooms};\n    }\n\n    componentDidMount() {\n        this.createRandomMushrooms();\n        const timer = setInterval(() => {\n            this.moveMario();\n        }, 100);\n        this.setState({timer: timer});\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n\n    createRandomMushrooms() {\n        let shrooms = [];\n        for (let i = 0; i < Math.max(this.state.height, this.state.width); i++) {\n            const x = Math.floor(Math.random() * this.state.width);\n            const y = Math.floor(Math.random() * this.state.height);\n            shrooms.push({x, y});\n        }\n        this.setState({mushrooms: shrooms});\n    }\n\n    moveMario() {\n        if (this.state.mushrooms.length === 0) {\n            clearInterval(this.state.timer);\n        }\n        if (this.state.direction) {\n            let bounced = false;\n            if (this.shouldBounce(this.state.mario.prev.x, this.state.mario.prev.y)) {\n                console.log('bouncing mario');\n                this.changeDirection();\n                bounced = true;\n            }\n            console.log('move mario');\n            const next = this.nextMarioLocation();\n            if (!bounced) {\n                this.setState({mario: {next: next, prev: this.state.mario.next}});\n            } else {\n                this.setState({mario: {next: next, prev: this.state.mario.prev}});\n            }\n            const newMushrooms = this.state.mushrooms.filter(m => !(m.x === next.x && m.y === next.y));\n            this.setState({mushrooms: newMushrooms, moves: this.state.moves + 1});\n            this.forceUpdate();\n        }\n    }\n\n    nextMarioLocation() {\n        console.log(this.state.direction);\n        if (this.state.direction === 'l') {\n            return {x: this.state.mario.prev.x - 1, y: this.state.mario.next.y};\n        } else if (this.state.direction === 'r') {\n            return {x: this.state.mario.prev.x + 1, y: this.state.mario.next.y};\n        } else if (this.state.direction === 'u') {\n            return {x: this.state.mario.next.x, y: this.state.mario.prev.y - 1};\n        } else if (this.state.direction === 'd') {\n            return {x: this.state.mario.next.x, y: this.state.mario.prev.y + 1};\n        } else {\n            return {x: this.state.mario.prev.x, y: this.state.mario.prev.y};\n        }\n    }\n\n    shouldBounce(x, y) {\n        if (x === 0 && y === 0 && (this.state.direction === 'u' || this.state.direction === 'l')) {\n            return true;\n        }\n        if (x === this.state.width && y === this.state.height && (this.state.direction === 'd' || this.state.direction === 'r')) {\n            return true;\n        }\n        if (x === 0 && this.state.direction === 'l') {\n            return true;\n        }\n        if (x === this.state.width - 1 && this.state.direction === 'r') {\n            return true;\n        }\n        if (y === 0 && this.state.direction === 'u') {\n            return true;\n        }\n        if (y === this.state.height - 1 && this.state.direction === 'd') {\n            return true;\n        }\n        return false;\n    }\n\n    changeDirection() {\n        console.log(`from ${this.state.direction}`);\n        if (this.state.direction === 'l') {\n            this.setState({direction: 'r'});\n        } else if (this.state.direction === 'r') {\n            this.setState({direction: 'l'});\n        } else if (this.state.direction === 'u') {\n            this.setState({direction: 'd'});\n        } else {\n            this.setState({direction: 'u'});\n        }\n        console.log(`to ${this.state.direction}`);\n    }\n\n    setupGrid() {\n        const grid = new Array(this.state.height).fill(0).map(_ => new Array(this.state.width).fill(0));\n        this.setState({grid: grid});\n    }\n\n    includes(x, y) {\n        if (this.state.mushrooms[0]) {\n            for (let i = 0; i < this.state.width; i++) {\n                if (this.state.mushrooms[i] && this.state.mushrooms[i].x === x && this.state.mushrooms[i].y === y) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    render() {\n        const createGrid = () => {\n            const item = (key, maybeMushroom, classess = \"grid-item\") => (\n                <div key={key} className={classess + (maybeMushroom ? \" hasMushroom\" : \"\")}></div>\n            );\n            const libr = key => <br key={key}/>;\n            const grid = [];\n            for (let i = 0; i < this.state.height; i++) {\n                grid[i] = []; // visual grid\n                for (let j = 0; j < this.state.width; j++) {\n                    const isMarioThere = i === this.state.mario.next.y && j === this.state.mario.next.x;\n                    const key = `row-${i}-col-${j}-grid`;\n                    if (isMarioThere) {\n                        grid[i].push(item(key, false, \"grid-item mario\"));\n                    } else {\n                        const hasMushroom = this.includes(j, i) && !isMarioThere;\n                        grid[i].push(item(key, hasMushroom));\n                    }\n                }\n                grid[i].push(libr(`row-${i}-libr`));\n            }\n            return grid;\n        };\n        return (\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <div id=\"grid\" {...ArrowKeysReact.events} tabIndex=\"1\">\n                            {createGrid()}\n                            <Moves moves={this.state.moves}/>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Input from './Input';\nimport Grid from './Grid';\nimport {Container, Row, Col, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    const [gridDimensions, setGridDimensions] = useState({height: 10, width: 10});\n    \n    return (\n        <Container fluid className=\"App\">\n            <Row>\n                <Col>\n                    <header className=\"App-header\">\n                        <h1>Mario?</h1>\n                        <h6>It goes brrr...</h6>\n                    </header>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Input setGridDimensions={setGridDimensions} gridDimensions={gridDimensions}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Grid gridDimensions={gridDimensions}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}